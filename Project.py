#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import pandas as pd


# In[7]:





# In[14]:


# Read CSV file and convert it into a Pandas DataFrame
df = pd.read_csv('data.csv', encoding='ISO-8859-1')

# Display the DataFrame
print(df)


# In[15]:


df.head()


# In[17]:


import pandas as pd


# Convert InvoiceDate to datetime
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])

# Compute the Revenue for each row
df['Revenue'] = df['Quantity'] * df['UnitPrice']

# Task 1: Compute the total revenue generated by the online store for each month
df['Month'] = df['InvoiceDate'].dt.to_period('M')
monthly_revenue = df.groupby('Month')['Revenue'].sum().reset_index()

# Task 2: Compute the total revenue generated by each product
product_revenue = df.groupby('StockCode')['Revenue'].sum().reset_index()

# Task 3: Compute the total revenue generated by each customer
customer_revenue = df.groupby('CustomerID')['Revenue'].sum().reset_index()

# Task 4: Identify the top 10 customers by revenue generated
top_10_customers = customer_revenue.nlargest(10, 'Revenue')


print("Total Revenue by Month:")
print(monthly_revenue)
print("\nTotal Revenue by Product:")
print(product_revenue)
print("\nTotal Revenue by Customer:")
print(customer_revenue)
print("\nTop 10 Customers by Revenue:")
print(top_10_customers)


# In[19]:


import unittest
import pandas as pd
from io import StringIO


import pandas as pd

def calculate_revenue(df, calculation_type):
    df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])
    df['Revenue'] = df['Quantity'] * df['UnitPrice']

    if calculation_type == 'monthly':
        df['Month'] = df['InvoiceDate'].dt.to_period('M')
        return df.groupby('Month')['Revenue'].sum().reset_index()
    elif calculation_type == 'product':
        return df.groupby('StockCode')['Revenue'].sum().reset_index()
    elif calculation_type == 'customer':
        return df.groupby('CustomerID')['Revenue'].sum().reset_index()
    elif calculation_type == 'top_customers':
        customer_revenue = df.groupby('CustomerID')['Revenue'].sum().reset_index()
        return customer_revenue.nlargest(10, 'Revenue')
    else:
        raise ValueError("Invalid calculation type specified")

if __name__ == '__main__':
    df = pd.read_csv('data.csv', encoding='ISO-8859-1')
    monthly_revenue = calculate_revenue(df, 'monthly')
    product_revenue = calculate_revenue(df, 'product')
    customer_revenue = calculate_revenue(df, 'customer')
    top_10_customers = calculate_revenue(df, 'top_customers')

    print("Total Revenue by Month:")
    print(monthly_revenue)
    print("\nTotal Revenue by Product:")
    print(product_revenue)
    print("\nTotal Revenue by Customer:")
    print(customer_revenue)



# In[21]:


import pandas as pd
from io import StringIO


# Sample data
data = StringIO("""InvoiceNo,StockCode,Description,Quantity,InvoiceDate,UnitPrice,CustomerID,Country
536365,85123A,WHITE HANGING HEART T-LIGHT HOLDER,6,12/1/2010 8:26,2.55,17850,United Kingdom
536365,71053,WHITE METAL LANTERN,6,12/1/2010 8:26,3.39,17850,United Kingdom
536365,84406B,CREAM CUPID HEARTS COAT HANGER,8,12/1/2010 8:26,2.75,17850,United Kingdom""")
df = pd.read_csv(data, encoding='ISO-8859-1')

# Convert InvoiceDate to datetime
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])

# Test monthly revenue
monthly_revenue = calculate_revenue(df, 'monthly')
assert monthly_revenue['Revenue'].sum() == 6*2.55 + 6*3.39 + 8*2.75, "Monthly revenue calculation failed"

# Test product revenue
product_revenue = calculate_revenue(df, 'product')
assert product_revenue['Revenue'].sum() == 6*2.55 + 6*3.39 + 8*2.75, "Product revenue calculation failed"

# Test customer revenue
customer_revenue = calculate_revenue(df, 'customer')
assert customer_revenue['Revenue'].sum() == 6*2.55 + 6*3.39 + 8*2.75, "Customer revenue calculation failed"

# Test top 10 customers
top_10_customers = calculate_revenue(df, 'top_customers')
assert len(top_10_customers) == 1, "Top 10 customers calculation failed"
assert top_10_customers.iloc[0]['Revenue'] == 6*2.55 + 6*3.39 + 8*2.75, "Top customer revenue calculation failed"

print("All tests passed!")


# In[ ]:




